{"version":3,"sources":["components/Tmdb/Tmdb.js","components/MovieRow/MovieRow.js","components/ContrastedMovie/ContrastedMovie.js","components/Header/Header.js","App.js","index.js"],"names":["api_key","fetch_url","endpoint","a","fetch","requisicao","json","Films","getHomeList","slug","title","items","getMovieInfo","movieId","type","info","MovieRow","useState","scrollX","setScrollX","isMoved","setIsMoved","className","onClick","x","Math","floor","window","innerWidth","NavigateBefore","style","fontSize","display","NavigateNext","round","listWidth","results","length","marginLeft","width","map","item","key","src","poster_path","alt","original_title","ContrastedMovie","filme","firstDate","Date","first_air_date","genres","forEach","element","push","name","description","overview","lenght","substring","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","href","id","join","Header","blackHeader","Search","Films_section","moviesList","setMoviesList","contrastedMovie","setContrastedMovie","setBlackHeader","useEffect","list","posterFilmes","filter","films","randomFilm","random","chosenFilm","allInfoFromChosen","loadAll","scrollListener","scrollY","addEventListener","removeEventListener","aria-label","role","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.40c95bc9.chunk.js","sourcesContent":["const api_key = 'de0e746ab5cbd789cda400ae86e4c3a6'\r\nconst url_base = 'https://api.themoviedb.org/3/'\r\n\r\n/*LISTA DE FILMES DE TEROR, \r\n*/\r\n\r\nconst fetch_url = async(endpoint) =>{\r\n    const requisicao = await fetch(`${url_base}${endpoint}`);\r\n    const json = await requisicao.json();\r\n    return json;\r\n}\r\n    \r\n\r\nconst Films = {\r\n\r\n    getHomeList : async () =>{\r\n        return [\r\n            {\r\n                slug:'originals',\r\n                title:'Originais Netflix',\r\n                items: await fetch_url(`discover/tv?with_networks=213&api_key=${api_key}&language=pt-BR`)\r\n            },\r\n            {\r\n                slug:'tranding',\r\n                title:'Recomendados da Semana',\r\n                items:await fetch_url(`trending/all/week?api_key=${api_key}&language=pt-BR`)\r\n            },\r\n            {\r\n                slug:'toprated',\r\n                title:'Em Alta',\r\n                items:await fetch_url(`movie/top_rated?api_key=${api_key}&language=pt-BR`)\r\n            },\r\n            {\r\n                slug:'documentary',\r\n                title:'Documentários',\r\n                items:await fetch_url(`discover/movie?with_genres=99&api_key=${api_key}&language=pt-BR`)\r\n\r\n            },\r\n            {\r\n                slug:'comedy',\r\n                title:'Comédia',\r\n                items:await fetch_url(`discover/movie?with_genres=35&api_key=${api_key}&language=pt-BR`)\r\n            },\r\n            {\r\n                slug:'action',\r\n                title:'Ação',\r\n                items:await fetch_url(`discover/movie?with_genres=28&api_key=${api_key}&language=pt-BR`)\r\n            },\r\n            {\r\n                slug:'horror',\r\n                title:'Terror',\r\n                items:await fetch_url(`discover/movie?with_genres=27&api_key=${api_key}&language=pt-BR`)\r\n            },\r\n        ]\r\n    },\r\n    getMovieInfo : async (movieId, type) => {\r\n        let info ={};\r\n        if(movieId){\r\n            switch(type){\r\n                default:\r\n                    info =  null;\r\n                break;\r\n                case 'movie':\r\n                    info = await fetch_url(`movie/${movieId}?language=pt_BR&api_key=${api_key}`);\r\n                break;\r\n                case 'tv':\r\n                    info = await fetch_url(`tv/${movieId}?language=pt_BR&api_key=${api_key}`);\r\n                break;\r\n            }\r\n        }\r\n        return info;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Films;","import React, {useState} from 'react';\r\nimport \"./MovieRowStyle.css\";\r\nimport { NavigateBefore, NavigateNext } from \"@material-ui/icons\";\r\n\r\nconst MovieRow = ({title,items}) =>{\r\n   \r\n    const [scrollX, setScrollX] = useState(0);\r\n    const [isMoved, setIsMoved] = useState(false);\r\n\r\n    const handleLeftArrow = () =>{\r\n        let x = scrollX + Math.floor(window.innerWidth / 2);\r\n        if(x > 0){\r\n            x=0;\r\n        }\r\n        setScrollX(x);\r\n\r\n    };\r\n    const handleRightArrow = () => {\r\n        let x = scrollX - Math.round(window.innerWidth / 2);\r\n        let listWidth = items.results.length * 150;\r\n        if((window.innerWidth - listWidth) > x){\r\n            x = window.innerWidth - listWidth - 40;\r\n        }\r\n        setScrollX(x);\r\n        setIsMoved(true);\r\n    };\r\n\r\n    return(\r\n        <div className=\"movieRow\">\r\n            <h2>\r\n                {title}\r\n            </h2>\r\n        <div className=\"movieRow-navegate-left\" onClick={handleLeftArrow} >\r\n            <NavigateBefore style={{fontSize:50, display: !isMoved && \"none\"}} />\r\n        </div>\r\n        <div className=\"movieRow-navegate-right\">\r\n            <NavigateNext style={{fontSize:50}} onClick={handleRightArrow} />\r\n        </div>\r\n        \r\n            <div className=\"movieRow-listarea\">\r\n                <div className=\"movieRow-list\" style={{\r\n                     marginLeft: scrollX,\r\n                      width:items.results.length * 150,\r\n                      }}\r\n                    >\r\n                    {items.results.length > 0 && items.results.map((item, key) =>(\r\n                        <div key={key} className=\"film\">\r\n                            <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.original_title} />\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n            \r\n            \r\n        </div>\r\n    );\r\n   \r\n}\r\n\r\nexport default MovieRow;","import \"./ContrastedMovieStyle.css\";\r\nimport React from \"react\";\r\n\r\nconst ContrastedMovie = ({ filme }) => {\r\n\tlet firstDate = new Date(filme.first_air_date);\r\n\tlet genres = [];\r\n\tfilme.genres.forEach(element => {\r\n\t\tgenres.push(element.name);\r\n\t});\r\n\r\n\tlet description = filme.overview;\r\n\tif(description.lenght > 200){\r\n\t\tdescription = description.substring(0,200) + \"...\"; \r\n\t}\r\n\r\n\treturn (\r\n\t\t<section\r\n\t\t\tclassName=\"featured\"\r\n\t\t\tstyle={{\r\n\t\t\t\tbackgroundSize: \"cover\",\r\n\t\t\t\tbackgroundPosition: \"center\",\r\n\t\t\t\tbackgroundImage: `url(https://image.tmdb.org/t/p/original${filme.backdrop_path})`,\r\n\t\t\t}}>\r\n\t\t\t<div className=\"featured-vertical\">\r\n\t\t\t\t<div className=\"featured-horizontal\">\r\n\t\t\t\t\t<div className=\"featured-name\">\r\n                        {filme.original_name}\r\n                    </div>\r\n\t\t\t\t\t<div className=\"featured-info\">\r\n\t\t\t\t\t\t<div className=\"featured-points\">{filme.vote_average}</div>\r\n\t\t\t\t\t\t<div className=\"featured-year\">{firstDate.getFullYear()}</div>\r\n                        <div className=\"featured-season\">{filme.number_of_seasons}{filme.number_of_seasons !== 1 ? ` Temporadas` : ' Temporada'}</div>\r\n\t\t\t\t\t</div>\r\n                    <div className=\"featured-overview\">\r\n                        {description}\r\n                    </div>\r\n\t\t\t\t\t<div className=\"featured-buttons\">\r\n\t\t\t\t\t\t<a href={`watch/${filme.id}`} className=\"watch-button\">►Assitir</a>\r\n\t\t\t\t\t\t<a href={`info/${filme.id}`} className=\"info-button\">Mais informações</a>\r\n\t\t\t\t\t</div>\r\n                    <div className=\"featured-genres\"><strong>Gêneros: </strong>{genres.join(\", \")}</div>\r\n\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t);\r\n};\r\nexport default ContrastedMovie;\r\n","import React from 'react';\r\nimport \"./Header.css\";\r\nimport {Search} from \"@material-ui/icons\"\r\n\r\nconst Header = ({blackHeader}) =>{\r\n    return(\r\n        <header className={blackHeader ? \"black\" : \"\"}>\r\n            <div className=\"header-logo\">\r\n                <a href=\"localhost:3000\">\r\n                    <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\r\n                     alt=\"Netflix\"/>\r\n                </a>\r\n            </div>\r\n              <div className=\"header-options\">\r\n                <ul>\r\n                    <li>Início</li>\r\n                    <li>Séries</li>\r\n                    <li>Filmes</li>\r\n                    <li>Bombando</li>\r\n                    <li>Minha&nbsp;Lista</li>\r\n                </ul>\r\n            </div>\r\n            <div className=\"header-user\">\r\n                <Search />\r\n                <a href=\"http://localhost:3000/\">\r\n                    <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" alt=\"Eu\"/>\r\n                </a>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Films from \"./components/Tmdb/Tmdb\";\r\nimport \"./App.css\";\r\nimport MovieRow from './components/MovieRow/MovieRow';\r\nimport ContrastedMovie from \"./components/ContrastedMovie/ContrastedMovie\";\r\nimport Header from \"./components/Header/Header\";\r\n\r\nconst Films_section = () => {\r\n\tconst [moviesList, setMoviesList] = useState([]);\r\n\tconst [contrastedMovie, setContrastedMovie] = useState(null);\r\n\tlet [blackHeader, setBlackHeader] = useState(false);\r\n\r\n\r\n\t//ESSE useEffet recarrega toda a lista quando a pagina da f5\r\n\tuseEffect(() => {\r\n\t\tconst loadAll = async () => { \r\n\t\t\t\r\n\t\t\tlet list = await Films.getHomeList();\r\n\t\t\tsetMoviesList(list);\r\n\t\t\tlet posterFilmes = list.filter( films => films.slug === 'originals');\r\n\t\t\tlet randomFilm =Math.floor(Math.random() * (posterFilmes[0].items.results.length -1))\r\n\t\t\tlet chosenFilm = posterFilmes[0].items.results[randomFilm];\r\n\t\t\tlet allInfoFromChosen = await Films.getMovieInfo(chosenFilm.id, \"tv\");\r\n\t\t\tsetContrastedMovie(allInfoFromChosen);\r\n\t\t}\r\n\r\n\r\n\t\tloadAll();\r\n\t}, []);\r\n\r\n\tuseEffect(() =>{\r\n\t\tconst scrollListener = () =>{\r\n\t\t\tif(window.scrollY > 15){\r\n\t\t\t\tsetBlackHeader(true); \r\n\t\t\t}else{\r\n\t\t\t\tsetBlackHeader(false);\r\n\t\t\t}\r\n\t\t}\r\n\t\twindow.addEventListener('scroll', scrollListener);\r\n\t\treturn () =>{\r\n\t\t\twindow.removeEventListener('scroll', scrollListener);\r\n\t\t}\r\n\t}, [])\r\n\r\n\treturn (\r\n\t\t<div className=\"page\">\r\n\t\t\t{moviesList.length <= 3 &&\r\n\t\t\t<div className=\"loading\">\r\n\t\t\t\t<img id=\"loading-img\" src=\"https://c.tenor.com/DQyztbEmqnYAAAAC/netflix-loading.gif\" alt=\"Netlfix\"/>\r\n\t\t\t</div>\r\n\t\t}\r\n\t\t\t<Header blackHeader={blackHeader} />\r\n\t\t\t{contrastedMovie && \r\n\t\t\t<ContrastedMovie filme={contrastedMovie} />}\r\n\r\n\t\t\t<section className=\"lists\">\r\n\t\t\t\t{moviesList.map((item,key) =>(\r\n\t\t\t\t\t<MovieRow key={key} title={item.title} items={item.items}/>\r\n\t\t\t\t))}\r\n\t\t\t</section>\r\n\t\t\t<footer>\r\n\t\t\t\tFeito com <span aria-label=\"coração\" role=\"img\">❤</span> <br/>\r\n\t\t\t\t<a href=\"https://www.linkedin.com/in/ian-nascimento-11358b203/\"> Clique aqui e me conehça </a><br/>\r\n\t\t\t\tInspirado na Netflix e API do IMDB\r\n\t\t\t</footer>\r\n\t\t\t\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Films_section;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport FilmsSection from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <FilmsSection />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}